/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Home;

import ClientSide.Admin;
import Login.Login;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;
import nl.siegmann.epublib.domain.Book;
import nl.siegmann.epublib.domain.Resource;
import nl.siegmann.epublib.epub.EpubReader;

/**
 *
 * @author Hila
 */
public class AdminHome extends javax.swing.JFrame {

    private DefaultTableModel model;
    private DefaultTableModel bookModel;
    private DefaultTableModel downloadedBooksModel;
    private int rowIndex;
    private int bookRowIndex;
    private String bookPath;
    private byte[] bookCoverData;
    private final Admin admin = new Admin();

    /**
     * Creates new form AdminHome
     */
    public AdminHome() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        LogoutButton = new javax.swing.JButton();
        JTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        usernameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        userId = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usersTable = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        bookId = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        titleField = new javax.swing.JTextField();
        authorField = new javax.swing.JTextField();
        romanceCheckBox = new javax.swing.JCheckBox();
        mysteryCheckBox = new javax.swing.JCheckBox();
        actionCheckBox = new javax.swing.JCheckBox();
        historicalCheckBox = new javax.swing.JCheckBox();
        scienceFictionCheckBox = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        bookLocation = new javax.swing.JLabel();
        clearBookButton = new javax.swing.JButton();
        updateBookButton = new javax.swing.JButton();
        addBookButton = new javax.swing.JButton();
        deleteBookButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        bookSearchField = new javax.swing.JTextField();
        BookSearchButton = new javax.swing.JButton();
        bookRefreshButton = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        booksTable = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        downloadedBookSearchField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        usernameCheckBox = new javax.swing.JCheckBox();
        authorCheckBox = new javax.swing.JCheckBox();
        titleCheckBox = new javax.swing.JCheckBox();
        searchDownloadedBooksButton = new javax.swing.JButton();
        refreshDownloadedBooksButton = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        downloadedBooksTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 255, 204));

        jPanel2.setBackground(new java.awt.Color(102, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("LIBRARY MANAGEMENT SYSTEM");

        LogoutButton.setBackground(new java.awt.Color(153, 255, 204));
        LogoutButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        LogoutButton.setText("Logout");
        LogoutButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(351, 351, 351)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LogoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LogoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        JTabbedPane1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        jPanel3.setBackground(new java.awt.Color(102, 255, 255));

        jPanel4.setBackground(new java.awt.Color(153, 255, 204));
        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 204), 4, true));

        usernameField.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel2.setText("Password");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel3.setText("Username");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 40)); // NOI18N
        jLabel4.setText("User Info");

        clearButton.setBackground(new java.awt.Color(102, 255, 255));
        clearButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        clearButton.setText("Clear");
        clearButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        addButton.setBackground(new java.awt.Color(102, 255, 255));
        addButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        addButton.setText("Add User");
        addButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(102, 255, 255));
        deleteButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        deleteButton.setText("Delete User");
        deleteButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(102, 255, 255));
        updateButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        updateButton.setText("Update");
        updateButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        passwordField.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel5.setText("User ID");

        userId.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(52, 52, 52))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(47, 47, 47)
                        .addComponent(userId, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(userId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(92, 92, 92))
        );

        jPanel5.setBackground(new java.awt.Color(153, 255, 204));
        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 204), 4, true));

        jPanel6.setBackground(new java.awt.Color(153, 255, 204));
        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 204), 4, true));

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel12.setText("Search User");

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        searchButton.setBackground(new java.awt.Color(102, 255, 255));
        searchButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        searchButton.setText("Search");
        searchButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        refreshButton.setBackground(new java.awt.Color(102, 255, 255));
        refreshButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        refreshButton.setText("Refresh");
        refreshButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(26, 26, 26)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel7.setBackground(new java.awt.Color(153, 255, 204));
        jPanel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 204), 4, true));

        usersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User ID", "Username", "Password"
            }
        ));
        usersTable.setShowGrid(false);
        usersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(usersTable);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        JTabbedPane1.addTab("Users", jPanel3);

        jPanel9.setBackground(new java.awt.Color(102, 255, 255));

        jPanel10.setBackground(new java.awt.Color(153, 255, 204));
        jPanel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 204), 4, true));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 40)); // NOI18N
        jLabel6.setText("Book Info");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel7.setText("Book ID");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel8.setText("Title");

        bookId.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel10.setText("Author");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel11.setText("Genres");

        titleField.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        authorField.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        romanceCheckBox.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        romanceCheckBox.setText("Romance");

        mysteryCheckBox.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        mysteryCheckBox.setText("Mystery");

        actionCheckBox.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        actionCheckBox.setText("Action");

        historicalCheckBox.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        historicalCheckBox.setText("Historical");

        scienceFictionCheckBox.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        scienceFictionCheckBox.setText("Science Fiction");

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel14.setText("Location");

        browseButton.setBackground(new java.awt.Color(102, 255, 255));
        browseButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        browseButton.setText("Browse");
        browseButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        bookLocation.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        clearBookButton.setBackground(new java.awt.Color(102, 255, 255));
        clearBookButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        clearBookButton.setText("Clear");
        clearBookButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clearBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBookButtonActionPerformed(evt);
            }
        });

        updateBookButton.setBackground(new java.awt.Color(102, 255, 255));
        updateBookButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        updateBookButton.setText("Update");
        updateBookButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updateBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBookButtonActionPerformed(evt);
            }
        });

        addBookButton.setBackground(new java.awt.Color(102, 255, 255));
        addBookButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        addBookButton.setText("Add Book");
        addBookButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookButtonActionPerformed(evt);
            }
        });

        deleteBookButton.setBackground(new java.awt.Color(102, 255, 255));
        deleteBookButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        deleteBookButton.setText("Delete Book");
        deleteBookButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBookButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scienceFictionCheckBox)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(bookId, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(authorField)
                                .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(romanceCheckBox)
                                    .addComponent(actionCheckBox))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(historicalCheckBox)
                                    .addComponent(mysteryCheckBox))))))
                .addGap(0, 20, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(clearBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addBookButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBookButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(bookId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(titleField)
                    .addComponent(jLabel8))
                .addGap(12, 12, 12)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(authorField)
                    .addComponent(jLabel10))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(romanceCheckBox)
                            .addComponent(mysteryCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(actionCheckBox)
                            .addComponent(historicalCheckBox))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scienceFictionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(browseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63))
        );

        jPanel11.setBackground(new java.awt.Color(153, 255, 204));
        jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 204), 4, true));

        jPanel12.setBackground(new java.awt.Color(153, 255, 204));
        jPanel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 204), 4, true));

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel13.setText("Search Book");

        bookSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookSearchFieldActionPerformed(evt);
            }
        });

        BookSearchButton.setBackground(new java.awt.Color(102, 255, 255));
        BookSearchButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        BookSearchButton.setText("Search");
        BookSearchButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BookSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookSearchButtonActionPerformed(evt);
            }
        });

        bookRefreshButton.setBackground(new java.awt.Color(102, 255, 255));
        bookRefreshButton.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        bookRefreshButton.setText("Refresh");
        bookRefreshButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bookRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookRefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addGap(26, 26, 26)
                .addComponent(bookSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                .addComponent(BookSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(bookRefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bookSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BookSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookRefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel13.setBackground(new java.awt.Color(153, 255, 204));
        jPanel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 204), 4, true));

        booksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Title", "Author", "Genres", "Book Address", "Cover"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        booksTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                booksTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(booksTable);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        JTabbedPane1.addTab("Books", jPanel8);

        jPanel15.setBackground(new java.awt.Color(102, 255, 255));

        jPanel16.setBackground(new java.awt.Color(153, 255, 204));
        jPanel16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 204), 4, true));

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel15.setText("Search Downloaded Book");

        downloadedBookSearchField.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        jLabel9.setText("Search by:");

        usernameCheckBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        usernameCheckBox.setText("Username");

        authorCheckBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        authorCheckBox.setText("Author");

        titleCheckBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        titleCheckBox.setText("Title");

        searchDownloadedBooksButton.setBackground(new java.awt.Color(102, 255, 255));
        searchDownloadedBooksButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        searchDownloadedBooksButton.setText("Search");
        searchDownloadedBooksButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        searchDownloadedBooksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDownloadedBooksButtonActionPerformed(evt);
            }
        });

        refreshDownloadedBooksButton.setBackground(new java.awt.Color(102, 255, 255));
        refreshDownloadedBooksButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        refreshDownloadedBooksButton.setText("Refresh");
        refreshDownloadedBooksButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        refreshDownloadedBooksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshDownloadedBooksButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(usernameCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(titleCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(authorCheckBox))
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel16Layout.createSequentialGroup()
                            .addComponent(searchDownloadedBooksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(refreshDownloadedBooksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(downloadedBookSearchField, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(58, 58, 58)
                .addComponent(downloadedBookSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameCheckBox)
                    .addComponent(titleCheckBox)
                    .addComponent(authorCheckBox))
                .addGap(43, 43, 43)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchDownloadedBooksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshDownloadedBooksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(389, 389, 389))
        );

        jPanel17.setBackground(new java.awt.Color(153, 255, 204));
        jPanel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 204), 4, true));

        downloadedBooksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Title", "Author"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(downloadedBooksTable);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 990, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 651, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        JTabbedPane1.addTab("Downloaded Books", jPanel14);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(JTabbedPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void init() {
        tableViewUsers();
        tableViewBooks();
        tableViewDownloadedBooks();
        setLocationRelativeTo(null);
        userId.setText(String.valueOf(admin.getNextUserId()));
        bookId.setText(String.valueOf(admin.getNextBookId()));
    }

    private void tableViewUsers() {
        ArrayList<Object[]> table = admin.getUsers("");
        DefaultTableModel model1 = (DefaultTableModel) usersTable.getModel();
        for (Object[] arr : table) {
            for (Object element : arr) {
                if (element instanceof String[] strings) {
                    arr[2] = Arrays.toString(strings);
                }
            }
            model1.addRow(arr);
        }
        model = (DefaultTableModel) usersTable.getModel();
        usersTable.setRowHeight(30);
        usersTable.setShowGrid(true);
        usersTable.setGridColor(Color.BLACK);
        usersTable.setBackground(Color.WHITE);
    }

    private void clearForm() {
        userId.setText(String.valueOf(admin.getNextUserId()));
        usernameField.setText(null);
        passwordField.setText(null);
        usersTable.clearSelection();
    }

    public boolean isEmpty() {
        if (usernameField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username is missing");
            return false;
        } else if (String.valueOf(passwordField.getPassword()).isEmpty()) {
            JOptionPane.showMessageDialog(this, "Password is missing");
            return false;
        }
        return true;
    }

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearForm();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (isEmpty()) {
            String username = usernameField.getText();
            String password = String.valueOf(passwordField.getPassword());
            if (!admin.userExists(username)) {// username not used
                admin.addUser(username, password);
                usersTable.setModel(new DefaultTableModel(null, new Object[]{"User ID", "Username", "Password"}));

                ArrayList<Object[]> table = admin.getUsers("");
                DefaultTableModel model1 = (DefaultTableModel) usersTable.getModel();
                for (Object[] arr : table) {
                    for (Object element : arr) {
                        if (element instanceof String[] strings) {
                            arr[2] = Arrays.toString(strings);
                        }
                    }
                    model1.addRow(arr);
                }
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, "Username already used");
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (isEmpty()) {
            if (admin.userExists(usernameField.getText())) {
                int id = Integer.parseInt(userId.getText());
                admin.deleteUser(id);
                usersTable.setModel(new DefaultTableModel(null, new Object[]{"User ID", "Username", "Password"}));
                ArrayList<Object[]> table = admin.getUsers("");
                DefaultTableModel model1 = (DefaultTableModel) usersTable.getModel();
                for (Object[] arr : table) {
                    for (Object element : arr) {
                        if (element instanceof String[] strings) {
                            arr[2] = Arrays.toString(strings);
                        }
                    }
                    model1.addRow(arr);
                }
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, "This username doesnt exist");
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (isEmpty()) {
            int id = Integer.parseInt(userId.getText());
            String username = usernameField.getText();
            String password = String.valueOf(passwordField.getPassword());
            if (admin.canUpdateUser(id, username)) {
                admin.updateUser(id, username, password);

                usersTable.setModel(new DefaultTableModel(null, new Object[]{"User ID", "Username", "Password"}));
                ArrayList<Object[]> table = admin.getUsers("");
                DefaultTableModel model1 = (DefaultTableModel) usersTable.getModel();
                for (Object[] arr : table) {
                    for (Object element : arr) {
                        if (element instanceof String[] strings) {
                            arr[2] = Arrays.toString(strings);
                        }
                    }
                    model1.addRow(arr);
                }
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, "Can't update username");
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void LogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutButtonActionPerformed
        int a = JOptionPane.showConfirmDialog(this, "Do you want to logout now?", "Select", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            Login log = new Login();
            log.setVisible(true);
            log.pack();
            this.dispose();
            admin.close();
        }
    }//GEN-LAST:event_LogoutButtonActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        if (searchField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a search parameter");
        } else {
            usersTable.setModel(new DefaultTableModel(null, new Object[]{"User ID", "Username", "Password"}));
            ArrayList<Object[]> table = admin.getUsers(searchField.getText());
            DefaultTableModel model1 = (DefaultTableModel) usersTable.getModel();
            for (Object[] arr : table) {
                for (Object element : arr) {
                    if (element instanceof String[] strings) {
                        arr[2] = Arrays.toString(strings);
                    }
                }
                model1.addRow(arr);
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        searchField.setText(null);
        usersTable.setModel(new DefaultTableModel(null, new Object[]{"User ID", "Username", "Password"}));
        ArrayList<Object[]> table = admin.getUsers("");
        DefaultTableModel model1 = (DefaultTableModel) usersTable.getModel();
        for (Object[] arr : table) {
            for (Object element : arr) {
                if (element instanceof String[] strings) {
                    arr[2] = Arrays.toString(strings);
                }
            }
            model1.addRow(arr);
        }
        searchField.setText(null);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void usersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersTableMouseClicked
        model = (DefaultTableModel) usersTable.getModel();
        rowIndex = usersTable.getSelectedRow();
        userId.setText(model.getValueAt(rowIndex, 0).toString());
        usernameField.setText(model.getValueAt(rowIndex, 1).toString());
        passwordField.setText(model.getValueAt(rowIndex, 2).toString());
    }//GEN-LAST:event_usersTableMouseClicked

    private void tableViewBooks() {
        booksTable.setModel(new DefaultTableModel(null, new Object[]{"Book ID", "Title", "Author", "Genres", "Book Address", "Cover"}));
        ArrayList<Object[]> table = admin.getBooks("");
        DefaultTableModel model1 = (DefaultTableModel) booksTable.getModel();
        for (Object[] arr : table) {
            for (Object element : arr) {
                if (element instanceof String[] strings) {
                    arr[3] = Arrays.toString(strings);
                }
            }
            model1.addRow(arr);
        }
        bookModel = (DefaultTableModel) booksTable.getModel();
        booksTable.setRowHeight(200);
        booksTable.setShowGrid(true);
        booksTable.setGridColor(Color.BLACK);
        booksTable.setBackground(Color.white);
        booksTable.getColumnModel().getColumn(5).setCellRenderer(new LabelRendar());
    }

    private void clearBookForm() {
        bookId.setText(String.valueOf(admin.getNextBookId()));
        titleField.setText(null);
        authorField.setText(null);
        actionCheckBox.setSelected(false);
        mysteryCheckBox.setSelected(false);
        romanceCheckBox.setSelected(false);
        scienceFictionCheckBox.setSelected(false);
        historicalCheckBox.setSelected(false);
        bookLocation.setText(null);
        bookPath = null;
        booksTable.clearSelection();
    }

    public boolean isBookEmpty() {
        if (titleField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Title is missing");
            return false;
        } else if (authorField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Author is missing");
            return false;
        } else if (!(actionCheckBox.isSelected() || mysteryCheckBox.isSelected()
                || romanceCheckBox.isSelected() || historicalCheckBox.isSelected()
                || scienceFictionCheckBox.isSelected())) {
            JOptionPane.showMessageDialog(this, "Genres are not selected");
            return false;
        } else if (bookPath == null) {
            JOptionPane.showMessageDialog(this, "Book file not selected");
            return false;
        }
        return true;
    }


    private void bookSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookSearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookSearchFieldActionPerformed

    private void BookSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookSearchButtonActionPerformed
        if (bookSearchField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a search parameter");
        } else {
            booksTable.setModel(new DefaultTableModel(null, new Object[]{"Book ID", "Title", "Author", "Genres", "Book Address", "Cover"}));
            booksTable.getColumnModel().getColumn(5).setCellRenderer(new LabelRendar());
            ArrayList<Object[]> table = admin.getBooks(bookSearchField.getText());
            DefaultTableModel model1 = (DefaultTableModel) booksTable.getModel();
            for (Object[] arr : table) {
                for (Object element : arr) {
                    if (element instanceof String[] strings) {
                        arr[3] = Arrays.toString(strings);
                    }
                }
                model1.addRow(arr);
            }

        }
    }//GEN-LAST:event_BookSearchButtonActionPerformed

    private void bookRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookRefreshButtonActionPerformed
        bookSearchField.setText(null);
        booksTable.setModel(new DefaultTableModel(null, new Object[]{"Book ID", "Title", "Author", "Genres", "Book Address", "Cover"}));
        booksTable.getColumnModel().getColumn(5).setCellRenderer(new LabelRendar());
        ArrayList<Object[]> table = admin.getBooks("");
        DefaultTableModel model1 = (DefaultTableModel) booksTable.getModel();
        for (Object[] arr : table) {
            for (Object element : arr) {
                if (element instanceof String[] strings) {
                    arr[3] = Arrays.toString(strings);
                }
            }
            model1.addRow(arr);
        }
        bookSearchField.setText(null);
    }//GEN-LAST:event_bookRefreshButtonActionPerformed

    private void clearBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBookButtonActionPerformed
        clearBookForm();
    }//GEN-LAST:event_clearBookButtonActionPerformed

    private void updateBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBookButtonActionPerformed
        if (isBookEmpty()) {
            int id = Integer.parseInt(bookId.getText());
            String title = titleField.getText();
            String author = authorField.getText();
            List<String> genres = new ArrayList<>();
            if (actionCheckBox.isSelected()) {
                genres.add(actionCheckBox.getText());
            }
            if (historicalCheckBox.isSelected()) {
                genres.add(historicalCheckBox.getText());
            }
            if (mysteryCheckBox.isSelected()) {
                genres.add(mysteryCheckBox.getText());
            }
            if (romanceCheckBox.isSelected()) {
                genres.add(romanceCheckBox.getText());
            }
            if (scienceFictionCheckBox.isSelected()) {
                genres.add(scienceFictionCheckBox.getText());
            }
            admin.updateBook(id, title, author, genres, bookPath, bookCoverData);
            booksTable.setModel(new DefaultTableModel(null, new Object[]{"Book ID", "Title", "Author", "Genres", "Book Address", "Cover"}));
            booksTable.getColumnModel().getColumn(5).setCellRenderer(new LabelRendar());
            ArrayList<Object[]> table = admin.getBooks("");
            DefaultTableModel model1 = (DefaultTableModel) booksTable.getModel();
            for (Object[] arr : table) {
                for (Object element : arr) {
                    if (element instanceof String[] strings) {
                        arr[3] = Arrays.toString(strings);
                    }
                }
                model1.addRow(arr);
            }
            clearBookForm();
        }
    }//GEN-LAST:event_updateBookButtonActionPerformed

    private void addBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookButtonActionPerformed
        if (isBookEmpty()) {
            if (!admin.bookExists(titleField.getText())) {
                String title = titleField.getText();
                String author = authorField.getText();
                List<String> genres = new ArrayList<>();
                if (actionCheckBox.isSelected()) {
                    genres.add(actionCheckBox.getText());
                }
                if (historicalCheckBox.isSelected()) {
                    genres.add(historicalCheckBox.getText());
                }
                if (mysteryCheckBox.isSelected()) {
                    genres.add(mysteryCheckBox.getText());
                }
                if (romanceCheckBox.isSelected()) {
                    genres.add(romanceCheckBox.getText());
                }
                if (scienceFictionCheckBox.isSelected()) {
                    genres.add(scienceFictionCheckBox.getText());
                }
                admin.addBook(title, author, genres, bookPath, bookCoverData);
                booksTable.setModel(new DefaultTableModel(null, new Object[]{"Book ID", "Title", "Author", "Genres", "Book Address", "Cover"}));
                booksTable.getColumnModel().getColumn(5).setCellRenderer(new LabelRendar());
                ArrayList<Object[]> table = admin.getBooks("");
                DefaultTableModel model1 = (DefaultTableModel) booksTable.getModel();
                for (Object[] arr : table) {
                    for (Object element : arr) {
                        if (element instanceof String[] strings) {
                            arr[3] = Arrays.toString(strings);
                        }
                    }
                    model1.addRow(arr);
                }
                clearBookForm();
            } else {
                JOptionPane.showMessageDialog(this, "Book already exists");
            }
        }
    }//GEN-LAST:event_addBookButtonActionPerformed

    private void deleteBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBookButtonActionPerformed
        if (isBookEmpty()) {
            if (admin.bookExists(titleField.getText())) {
                int id = Integer.parseInt(bookId.getText());
                admin.deleteBook(id);
                booksTable.setModel(new DefaultTableModel(null, new Object[]{"Book ID", "Title", "Author", "Genres", "Book Address", "Cover"}));
                booksTable.getColumnModel().getColumn(5).setCellRenderer(new LabelRendar());
                ArrayList<Object[]> table = admin.getBooks("");
                DefaultTableModel model1 = (DefaultTableModel) booksTable.getModel();
                for (Object[] arr : table) {
                    for (Object element : arr) {
                        if (element instanceof String[] strings) {
                            arr[3] = Arrays.toString(strings);
                        }
                    }
                    model1.addRow(arr);
                }
                clearBookForm();
            } else {
                JOptionPane.showMessageDialog(this, "This book doesnt exist");
            }
        }

    }//GEN-LAST:event_deleteBookButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.epub", "epub");
        file.addChoosableFileFilter(filter);
        int output = file.showSaveDialog(file);
        if (output == JFileChooser.APPROVE_OPTION) {
            File selectFile = file.getSelectedFile();
            bookPath = selectFile.getAbsolutePath();
            bookLocation.setText(bookPath);
            try (InputStream epubFile = new FileInputStream(bookPath)) {
                // Load the EPUB book
                EpubReader epubReader = new EpubReader();
                Book book = epubReader.readEpub(epubFile);

                // Get the cover image
                Resource coverImage = book.getCoverImage();

                // If a cover image exists, save it
                if (coverImage != null) {
                    bookCoverData = coverImage.getData();
                } else {
                    System.out.println("No cover image found in the EPUB file.");
                    JOptionPane.showMessageDialog(this, "No cover image was found for the book. \n "
                            + "Choose a different book");
                    clearBookForm();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No book was selected");
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void booksTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_booksTableMouseClicked
        clearBookForm();
        bookModel = (DefaultTableModel) booksTable.getModel();
        bookRowIndex = booksTable.getSelectedRow();
        bookId.setText(bookModel.getValueAt(bookRowIndex, 0).toString());
        titleField.setText(bookModel.getValueAt(bookRowIndex, 1).toString());
        authorField.setText(bookModel.getValueAt(bookRowIndex, 2).toString());
        String genres = bookModel.getValueAt(bookRowIndex, 3).toString();
        if (genres.contains("Action")) {
            actionCheckBox.setSelected(true);
        }
        if (genres.contains("Romance")) {
            romanceCheckBox.setSelected(true);
        }
        if (genres.contains("Mystery")) {
            mysteryCheckBox.setSelected(true);
        }
        if (genres.contains("Historical")) {
            historicalCheckBox.setSelected(true);
        }
        if (genres.contains("Science Fiction")) {
            scienceFictionCheckBox.setSelected(true);
        }
        bookPath = bookModel.getValueAt(bookRowIndex, 4).toString();
        bookLocation.setText(bookPath);

        // Retrieve the JLabel from the selected row and convert it to byte[]
        Object coverLabel = bookModel.getValueAt(bookRowIndex, 5);
        if (coverLabel instanceof JLabel) {
            JLabel label = (JLabel) coverLabel;
            ImageIcon icon = (ImageIcon) label.getIcon();

            if (icon != null) {
                Image image = icon.getImage();

                // Convert Image to BufferedImage
                BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
                Graphics2D g2d = bufferedImage.createGraphics();
                g2d.drawImage(image, 0, 0, null);
                g2d.dispose();

                // Convert BufferedImage to byte[]
                try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
                    ImageIO.write(bufferedImage, "png", baos);
                    baos.flush();
                    bookCoverData = baos.toByteArray();
                } catch (IOException e) {
                    e.printStackTrace();
                    bookCoverData = null; // Set to null if there was an error
                }
            } else {
                bookCoverData = null; // No icon found
            }
        } else {
            bookCoverData = null; // No JLabel found
        }


    }//GEN-LAST:event_booksTableMouseClicked

    private void tableViewDownloadedBooks() {
        List<String> filter = new ArrayList<>();
        filter.add("");
        ArrayList<Object[]> table = admin.getDownloadedBooks(1, filter, "");
        DefaultTableModel model1 = (DefaultTableModel) downloadedBooksTable.getModel();
        for (Object[] arr : table) {
            model1.addRow(arr);
        }
        downloadedBooksModel = (DefaultTableModel) downloadedBooksTable.getModel();
        downloadedBooksTable.setRowHeight(30);
        downloadedBooksTable.setShowGrid(true);
        downloadedBooksTable.setGridColor(Color.BLACK);
        downloadedBooksTable.setBackground(Color.white);
    }
    private void refreshDownloadedBooksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshDownloadedBooksButtonActionPerformed
        downloadedBookSearchField.setText(null);
        downloadedBooksTable.setModel(new DefaultTableModel(null, new Object[]{"Username", "Title", "Author"}));
        List<String> filter = new ArrayList<>();
        filter.add("");
        ArrayList<Object[]> table = admin.getDownloadedBooks(1, filter, "");
        DefaultTableModel model1 = (DefaultTableModel) downloadedBooksTable.getModel();
        for (Object[] arr : table) {
            model1.addRow(arr);
        }
        downloadedBookSearchField.setText(null);
        usernameCheckBox.setSelected(false);
        titleCheckBox.setSelected(false);
        authorCheckBox.setSelected(false);
    }//GEN-LAST:event_refreshDownloadedBooksButtonActionPerformed

    private void searchDownloadedBooksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDownloadedBooksButtonActionPerformed

        if (!downloadedBookSearchField.getText().isEmpty()) {
            String searchValue = downloadedBookSearchField.getText();
            List<String> filters = new ArrayList<>(); // if no filters chosen filters=""
            if (usernameCheckBox.isSelected()) {
                filters.add("Public.\"Users\".\"username\"");
            }
            if (titleCheckBox.isSelected()) {
                filters.add("public.\"Books\".title");
            }
            if (authorCheckBox.isSelected()) {
                filters.add("public.\"Books\".author");
            }
            if (filters.isEmpty()) {
                filters.add("Public.\"Users\".\"username\"");
                filters.add("public.\"Books\".title");
                filters.add("public.\"Books\".author");
            }
            downloadedBooksTable.setModel(new DefaultTableModel(null, new Object[]{"Username", "Title", "Author"}));
            ArrayList<Object[]> table = admin.getDownloadedBooks(filters.size(), filters, searchValue);
        DefaultTableModel model1 = (DefaultTableModel) downloadedBooksTable.getModel();
        for (Object[] arr : table) {
            model1.addRow(arr);
        }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a search parameter");
        }

    }//GEN-LAST:event_searchDownloadedBooksButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BookSearchButton;
    private javax.swing.JTabbedPane JTabbedPane1;
    private javax.swing.JButton LogoutButton;
    private javax.swing.JCheckBox actionCheckBox;
    private javax.swing.JButton addBookButton;
    private javax.swing.JButton addButton;
    private javax.swing.JCheckBox authorCheckBox;
    private javax.swing.JTextField authorField;
    private javax.swing.JLabel bookId;
    private javax.swing.JLabel bookLocation;
    private javax.swing.JButton bookRefreshButton;
    private javax.swing.JTextField bookSearchField;
    private javax.swing.JTable booksTable;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton clearBookButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteBookButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField downloadedBookSearchField;
    private javax.swing.JTable downloadedBooksTable;
    private javax.swing.JCheckBox historicalCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JCheckBox mysteryCheckBox;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton refreshDownloadedBooksButton;
    private javax.swing.JCheckBox romanceCheckBox;
    private javax.swing.JCheckBox scienceFictionCheckBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchDownloadedBooksButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JCheckBox titleCheckBox;
    private javax.swing.JTextField titleField;
    private javax.swing.JButton updateBookButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel userId;
    private javax.swing.JCheckBox usernameCheckBox;
    private javax.swing.JTextField usernameField;
    private javax.swing.JTable usersTable;
    // End of variables declaration//GEN-END:variables

}

